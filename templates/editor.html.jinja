{% from "components/forms.jinja" import input_number %}
{% from "components/form_box.jinja" import add_high, remove_high, add_total, remove_total %}
<!DOCTYPE html>
<html lang="en-GB">
<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1" name="viewport">
    <title>Weatherdan</title>
    <link href="https://use.fontawesome.com/releases/v6.3.0/css/all.css" rel="stylesheet">
    <link disabled href="https://cdn.jsdelivr.net/gh/Buried-In-Code/Vegeta@0.9.4/hero/vegeta.min.css" id="light-theme" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/gh/Buried-In-Code/Vegeta@0.9.4/villain/vegeta.min.css" id="dark-theme" rel="stylesheet">
    <link href="/static/css/styles.css" rel="stylesheet">
    <link href="/static/img/favicon.ico" id="favicon" rel="icon" type="image/x-icon">
</head>
<body class="has-navbar-fixed-top">
{% include "components/navbar.jinja" %}
<main class="section">
    <div class="container">
        <header class="block has-text-centered">
            <h1 class="title is-1">Editor</h1>
        </header>
        <div class="columns is-centered is-multiline">
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                <div class="box">
                    <h5 class="title is-5 has-text-info-light">Graph Points</h5>
                    <form id="settings-form" onsubmit="return false;">
                        {{ input_number(label="Max Entries", name="max-entries", value=max_entries) }}
                        <div class="buttons is-centered">
                            <button class="button is-success" id="save-button" onclick="saveSettings()" type="button">
                                <span class="icon">
                                    <i class="fa-solid fa-floppy-disk"></i>
                                </span>
                                <span>Save</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ add_total("Rainfall", "mm", "/api/rainfall") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ remove_total("Rainfall", "/api/rainfall") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ add_high("Solar", "lx", "/api/solar") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ remove_high("Solar", "/api/solar") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ add_high("UV Index", "", "/api/uv-index") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ remove_high("UV Index", "/api/uv-index") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ add_high("Wind", "km/h", "/api/wind") }}
            </div>
            <div class="column is-one-quarter-tablet is-one-fifth-fullhd">
                {{ remove_high("Wind", "/api/wind") }}
            </div>
        </div>
    </div>
</main>
{% include "components/footer.jinja" %}
<script src="https://cdn.jsdelivr.net/npm/moment@^2.29" type="text/javascript"></script>
<script src="/static/js/scripts.js" type="text/javascript"></script>
<script src="/static/js/bulma-navbar.js" type="text/javascript"></script>
<script type="text/javascript">
  ready(() => {
    const today = moment().format("YYYY-MM-DD");
    document.getElementsByName("datestamp").forEach(element => {
      element.value = today;
    });
  });

  function saveSettings() {
    const caller = "save-button";
    const form = document.getElementById("settings-form");
    const formData = Object.fromEntries(new FormData(form));

    toggleLoading(caller);
    document.cookie = `weatherdan_max-entries=${formData["max-entries"]};path=/;max-age=${60*60*24*30};SameSite=Strict`;
    window.location.reload();
    toggleLoading(caller);
  }

  async function addHighEntry(prefix, endpoint) {
    const caller = `add-${prefix}-button`
    const form = document.getElementById(`add-${prefix}-form`);
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      datestamp: formData["datestamp"],
      high: formData["high"],
    };

    toggleLoading(caller);
    const response = await submitRequest(endpoint, "POST", body);
    if (response !== null) {
      form.reset();
      window.location.reload();
    }
    toggleLoading(caller);
  }

  async function removeHighEntry(prefix, endpoint) {
    const caller = `remove-${prefix}-button`
    const form = document.getElementById(`remove-${prefix}-form`);
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      datestamp: formData["datestamp"],
    };

    toggleLoading(caller);
    const response = await submitRequest(endpoint, "DELETE", body);
    if (response !== null) {
      form.reset();
      window.location.reload();
    }
    toggleLoading(caller);
  }

  async function addTotalEntry(prefix, endpoint) {
    const caller = `add-${prefix}-button`
    const form = document.getElementById(`add-${prefix}-form`);
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      datestamp: formData["datestamp"],
      total: formData["total"],
    };

    toggleLoading(caller);
    const response = await submitRequest(endpoint, "POST", body);
    if (response !== null) {
      form.reset();
      window.location.reload();
    }
    toggleLoading(caller);
  }

  async function removeTotalEntry(prefix, endpoint) {
    const caller = `remove-${prefix}-button`
    const form = document.getElementById(`remove-${prefix}-form`);
    const formData = Object.fromEntries(new FormData(form));
    const body = {
      datestamp: formData["datestamp"],
    };

    toggleLoading(caller);
    const response = await submitRequest(endpoint, "DELETE", body);
    if (response !== null) {
      form.reset();
      window.location.reload();
    }
    toggleLoading(caller);
  }
</script>
</body>
</html>
